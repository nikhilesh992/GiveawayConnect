# üéÅ GiveawayConnect  
### Community Giveaway & Donation Platform  
Built with **React + Firebase + PayUMoney + Hostinger SMTP**

---

## üöÄ Overview

GiveawayConnect is a web platform for hosting online giveaways, community participation, and donations.  
Users can join giveaways, complete reward tasks, refer friends, and earn points for higher winning chances.  
Donations are optional (via PayUMoney), and the admin can manage all data through a powerful dashboard.

---

## üß© Tech Stack

**Frontend:** React + TypeScript + TailwindCSS + shadcn/ui  
**Backend:** Firebase (Auth, Firestore, Functions, Storage, Analytics)  
**Payments:** PayUMoney (INR)  
**Email (OTP & Notifications):** Hostinger SMTP  
**Hosting:** Hostinger (frontend) + Firebase Functions (backend)  
**Analytics:** Google Analytics 4  

---

## üìÅ Folder Structure

giveawayconnect/
‚îú‚îÄ‚îÄ src/
‚îÇ ‚îú‚îÄ‚îÄ components/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ giveaways/
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ GiveawayCard.tsx
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ GiveawayDetail.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ tasks/
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ TaskList.tsx
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ TaskItem.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ referrals/ReferralBox.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ leaderboard/Leaderboard.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ chat/ChatPanel.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ donations/
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ DonateForm.tsx
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ DonorLeaderboard.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ admin/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ SettingsForm.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ GiveawaysTable.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ UsersTable.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ DonationsTable.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ AuditLogTable.tsx
‚îÇ ‚îú‚îÄ‚îÄ lib/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ firebase.ts # Firebase client setup
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ api.ts # Client calls to Firebase Functions
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ auth.ts # Auth helpers
‚îÇ ‚îú‚îÄ‚îÄ pages/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ index.tsx # Home
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ giveaways.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ g/[gid].tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ winners.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ support.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ auth/login.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ auth/verify.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ me/index.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ me/profile.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ admin/... # All admin pages
‚îú‚îÄ‚îÄ functions/ # Firebase Cloud Functions
‚îÇ ‚îú‚îÄ‚îÄ index.js
‚îÇ ‚îú‚îÄ‚îÄ package.json
‚îÇ ‚îú‚îÄ‚îÄ utils/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ email.js
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ payu.js
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ fairness.js
‚îú‚îÄ‚îÄ public/
‚îú‚îÄ‚îÄ .env.example
‚îú‚îÄ‚îÄ tailwind.config.js
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ README.md

yaml
Copy code

---

## ‚öôÔ∏è Setup Instructions

### 1Ô∏è‚É£ Install dependencies

```bash
npm install
or (if using yarn)

bash
Copy code
yarn install
2Ô∏è‚É£ Firebase Configuration
Client SDK
Your Firebase project:

yaml
Copy code
Project name: GiveawayConnect
Project ID: luck-by167u
Project number: 716594488057
Add Firebase SDK to your project:

js
Copy code
// src/lib/firebase.ts
import { initializeApp } from "firebase/app";
import { getAuth, GoogleAuthProvider } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getAnalytics, isSupported } from "firebase/analytics";

const config = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID,
};

const app = initializeApp(config);
const db = getFirestore(app);
const auth = getAuth(app);
const google = new GoogleAuthProvider();
isSupported().then(s => s && getAnalytics(app));

export { app, db, auth, google };
3Ô∏è‚É£ Environment Variables
Create a .env file in the project root (Replit + Hostinger env):

env
Copy code
NEXT_PUBLIC_FIREBASE_API_KEY=AIzaSyBIjC4eIM_NVt-sTa6CmEPrvBZwJOHn0yI
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=luck-by167u.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=luck-by167u
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=luck-by167u.firebasestorage.app
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=716594488057
NEXT_PUBLIC_FIREBASE_APP_ID=1:716594488057:web:bc5e4bbcc5ef376aa77828
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=G-XQ0H7DB19W
NEXT_PUBLIC_BASE_URL=https://yourdomain.com

FIREBASE_SERVICE_ACCOUNT_JSON_BASE64=<base64-of-service-account-json>

PAYU_MERCHANT_ID=13141483
PAYU_KEY=r5wyW4
PAYU_SALT=XsJMT8oE5cCjrQFzclX5E7JY9EJ4Q1S9
PAYU_SUCCESS_URL=https://yourdomain.com/support/success
PAYU_FAILURE_URL=https://yourdomain.com/support/failure
PAYU_ENV=prod

SMTP_HOST=smtp.hostinger.com
SMTP_PORT=465
SMTP_SECURE=true
SMTP_USER=giveaways@luvrix.com
SMTP_PASS=<your_password>
SMTP_FROM_NAME=GiveawayConnect
SMTP_FROM_EMAIL=giveaways@luvrix.com

GA4_MEASUREMENT_ID=G-XQ0H7DB19W
4Ô∏è‚É£ Firebase Functions
In functions/index.js:

js
Copy code
const functions = require("firebase-functions");
const admin = require("firebase-admin");
const nodemailer = require("nodemailer");
const crypto = require("crypto");

const serviceAccount = JSON.parse(
  Buffer.from(process.env.FIREBASE_SERVICE_ACCOUNT_JSON_BASE64, "base64").toString("utf8")
);

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  projectId: "luck-by167u",
});

const db = admin.firestore();

const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: Number(process.env.SMTP_PORT),
  secure: process.env.SMTP_SECURE === "true",
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

// Example: OTP Function
exports.requestEmailOtp = functions.https.onCall(async (data, context) => {
  const { email } = data;
  const otp = Math.floor(100000 + Math.random() * 900000);
  const mailOptions = {
    from: `"GiveawayConnect" <${process.env.SMTP_FROM_EMAIL}>`,
    to: email,
    subject: "Your GiveawayConnect OTP Code",
    text: `Your OTP code is: ${otp}`,
  };
  await transporter.sendMail(mailOptions);
  return { success: true, message: "OTP sent!" };
});
Deploy functions:

bash
Copy code
firebase deploy --only functions
5Ô∏è‚É£ Firestore Rules
Deploy with:

bash
Copy code
firebase deploy --only firestore:rules
Rules Outline:

js
Copy code
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /settings/{docId} { allow read: if true; allow write: if request.auth.token.admin == true; }
    match /giveaways/{gid} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }
    match /users/{uid} {
      allow read, update: if request.auth != null && request.auth.uid == uid;
    }
    match /donations/{docId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
  }
}
üß† Key Features
‚úÖ Google & Email OTP login (Firebase Auth + SMTP)
‚úÖ Domain allowlist for allowed emails (Admin-editable)
‚úÖ Join giveaways ‚Üí Complete reward tasks ‚Üí Earn points
‚úÖ Referral system (points for invites)
‚úÖ Weighted fairness winner system (auto/manual)
‚úÖ INR donations via PayUMoney
‚úÖ Donor leaderboard (monthly/all-time)
‚úÖ Admin Portal (full CMS + analytics + settings)
‚úÖ Responsive design, mobile-first

üßÆ Fairness Formula
js
Copy code
tickets = base
        + Math.floor(points / P) * alpha
        + Math.min(referrals, Rcap) * beta
        + beta * Math.log2(1 + Math.max(0, referrals - Rcap));

tickets = Math.min(tickets, Tmax);
if (tickets > ratioCap * medianTickets) tickets = ratioCap * medianTickets;
tickets += epsilon;
probability = tickets / totalTickets;
Defaults:
base=1, P=50, alpha=1, beta=2, Rcap=20, Tmax=500, ratioCap=5, epsilon=0.0001

üß≠ Pages
Public
/ ‚Äî Home (hero + featured giveaways)

/giveaways ‚Äî Browse giveaways

/g/:gid ‚Äî Giveaway detail + tasks + chat

/winners ‚Äî Leaderboards

/support ‚Äî Donations + leaderboards

/auth/login ‚Äî Login (Google/Email OTP)

User
/me ‚Äî Dashboard (joined giveaways, points, donations)

/me/profile ‚Äî Edit profile, anonymity toggle

Admin
/admin ‚Äî Dashboard KPIs

/admin/giveaways ‚Äî Manage giveaways

/admin/tasks ‚Äî Manage tasks

/admin/users ‚Äî Manage users

/admin/donations ‚Äî Manage donations

/admin/settings ‚Äî Domains, SMTP, Fairness, Ads, GA4

/admin/audit ‚Äî Admin logs

üß™ QA Checklist
 OTP emails delivered via Hostinger SMTP

 Google login works

 Domain restriction enforced

 Tasks complete once per giveaway

 Referrals credit referrer only if verified

 Auto/manual winner draw functional

 PayUMoney success/fail recorded

 Donations update donor board

 CMS edits reflect live instantly

 All admin actions logged

üß± Build Commands
bash
Copy code
npm run dev          # Local development
npm run build        # Build for production
npm run preview      # Preview locally
firebase deploy      # Deploy functions + rules
üí° Deployment
Build and upload /dist to Hostinger.

Add all environment variables in Hostinger‚Äôs control panel.

Deploy Firebase Functions with secrets.

Add your domain in Firebase Authentication allowed domains.

Test SMTP ‚ÄúSend Test Email‚Äù from Admin panel.

üëë Admin Capabilities
Full CRUD on giveaways, users, tasks, donations, settings

Change all site text, images, and templates

Configure SMTP, PayUMoney, fairness, GA4, ads

Manage domain allowlist

Select manual or auto winners

View audit logs of every action

üß≠ Build Timeline (Sprints)
1Ô∏è‚É£ Auth + Firebase setup
2Ô∏è‚É£ Giveaways + Join + Tasks
3Ô∏è‚É£ Referrals + Probabilities
4Ô∏è‚É£ Donations + PayUMoney
5Ô∏è‚É£ Winners (auto/manual)
6Ô∏è‚É£ Admin Panel + CMS
7Ô∏è‚É£ QA + Deployment

ü™™ License
¬© 2025 GiveawayConnect. All rights reserved.